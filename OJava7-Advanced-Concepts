<p>Ojava7 Advanced Concepts</p><br><p> ===========================</p><BR>

<p>This is about Ojava7 Advanced Concepts invented by Wilmix Jemin j belong to Ojava7 Programming Language which will be used with OJAVA7 Programming Language. Its file extension is .oakjava7.  OJava7 contains more Advanced Concepts(Ojava7 util packages) that can be used to solve complex problems and Complex logics.  This things are absent in all Programming Languages.That's why Ojava7 is called as a 100% pure Advanced Concepts.  Which are given below   Ojava7 util packages =======================   BUCKET -------</p>

<p>Bucket are used to store key,value data, and Generated Random number</p>

<p>where datatype may be string ,object ,etc.</p>

<p>SYNTAX: ------</p>

<p>Bucket<DATATYPE> list = <NEW> Bucket<DATATYPE>(<DATATYPEVALUE>);</p>

<p>list.KeyAdd(<DATATYPEVALUE>);</p>

<p>list.add(<DATATYPEVALUE>);</p>

<p>list.RandomAdd();</p>

<p>list.Display(list);</p>

<p>Advantages</p>

<p>----------</p>

<p>Using Bucket you can also Retrieve the values stored n position.</p>

<p>Searching and Insertion is fast than other DTS.</p>

<p>Random Indexing is possible.</p>

<p>eg) If you store a duplicate value such Random key will be different.</p>

<p>It also used to add many values.</p>

<p>EXTEND</p>

<p>------</p>

<p>Extend class is used in ,<OAKJAVA7> since to provide multiple inheritence</p>

<p>about 100000000 classes . Extends class also list values in methods and</p>

<p>constructor values.</p>

<p>Extend means a Bucket contains List of class and it is also</p>

<p>Behave like Bucket. So it is also one of the Advanced concepts in JDollarShell.</p>

<p>SYNTAX:</p>

<p>--------</p>

<p>EXTEND <<DATATYPE>> list11 = <NEW> EXTEND <<DATATYPE>> (STRING);</p>

<p>list.KeyAdd(<DATATYPEVALUE>);</p>

<p>list.add(<DATATYPEVALUE>);</p>

<p>list.RandomAdd();</p>

<p>list.Display(list);</p>

<p>Advantages:</p>

<p>It is also used to add many values</p>

<p>Indexing is possible</p>

<p>Value can also be list by index and behave like bucket.</p>

<p>It list only the class value and object value.</p>

<p>It is stateless.</p>

<p>PIPE:</p>

<p>-----</p>

<p>PIPE is used to maintain stateful state.</p>

<p>It is used for DataFlow in a Program. We can also add the values,</p>

<p>Constructor values of one class and other class and display it.</p>

<p>It also list the values from the Bucket.</p>

<p>SYNTAX:</p>

<p>-------</p>

<p>Pipe <<DATATYPE>> list11 = <NEW> Pipe <<DATATYPE>> (STRING);</p>

<p>list.KeyAdd(<DATATYPEVALUE>);</p>

<p>list.add(<DATATYPEVALUE>);</p>

<p>list.RandomAdd();</p>

<p>list.Display(list);</p>

<p>BUCKET</p>

<p>-------</p>

<p>Bucket are used to store key,value data, and Generated Random number</p>

<p>where datatype may be string ,object ,etc.</p>

<p>SYNTAX:</p>

<p>----------</p>

<p>Bucket<DATATYPE> list = <NEW> Bucket<DATATYPE>(<DATATYPEVALUE>);</p>

<p>list.KeyAdd(<DATATYPEVALUE>);</p>

<p>list.add(<DATATYPEVALUE>);</p>

<p>list.RandomAdd();</p>

<p>list.Display(list);</p>

<p>Advantages ----------</p>

<p>Using Bucket you can also Retrieve the values stored n position.</p>

<p>Searching and Insertion is fast than other DTS.</p>

<p>Random Indexing is possible.</p>

<p>eg) If you store a duplicate value such Random key will be different.</p>

<p>It also used to add many values.</p>

<p>EXTEND</p>

<p>------</p>

<p>Extend class is used in ,<OAKJAVA7> since to provide multiple inheritence</p>

<p>about 100000000 classes . Extends class also list values in methods and</p>

<p>constructor values.</p>

<p>Extend means a Bucket contains List of class and it is also</p>

<p>Behave like Bucket. So it is also one of the Advanced concepts in JDollarShell.</p>

<p>SYNTAX:</p>

<p>--------</p>

<p>EXTEND <<DATATYPE>> list11 = <NEW> EXTEND <<DATATYPE>> (STRING);</p>

<p>list.KeyAdd(<DATATYPEVALUE>);</p>

<p>list.add(<DATATYPEVALUE>);</p>

<p>list.RandomAdd();</p>

<p>list.Display(list);</p>

<p>Advantages: ===========</p>

<p>It is also used to add many values</p>

<p>Indexing is possible</p>

<p>Value can also be list by index and behave like bucket.</p>

<p>It list only the class value and object value.</p>

<p>It is stateless.</p>

<p>PIPE:</p>

<p>-----</p>

<p>PIPE is used to maintain stateful state.</p>

<p>It is used for DataFlow in a Program. We can also add the values,</p>

<p>Constructor values of one class and other class and display it.</p>

<p>It also list the values from the Bucket.</p>

<p>SYNTAX:</p>

<p>-------</p>

<p>Pipe <<DATATYPE>> list11 = <NEW> Pipe <<DATATYPE>> (STRING);</p>

<p>list.KeyAdd(<DATATYPEVALUE>);</p>

<p>list.add(<DATATYPEVALUE>);</p>

<p>list.RandomAdd();</p>

<p>list.Display(list);</p>

<p>OJava7 MAIN Program Syntax AND ADVANCED CONCEPTS PROGRAM.</p>

<p>(.oakjava7)</p>

<p>Syntax:</p>

<p> <OJAVA7></p>

<p><PACK> <NAMESPACE></p>

<p><%</p>

<p> <CLASS> <CLASSNAME></p>

<p> {</p>

<p> public void main()</p>

<p> {</p>

<p></p>

<p><! OJava7 LOGIC!></p>

<p></p>

<p></p>

<p>%></p>

<p>?></p>

<p>BAG</p>

<p>=====</p>

<p>Bag is the extension of LinkedHashmap and it is the fastest</p>

<p>datastructures than Dictionary.</p>

<p>SYNTAX:</p>

<p>=======</p>

<p>Bag object = new Bag();</p>

<p>object .put(key,value);</p>

<p>Functions</p>

<p>getValues(key) => it is used to get the values for a particular key</p>

<p>get(key,loc) => it is used to get the value stored at a loc (indexing</p>

<p>purpose)</p>

<p>boolean containsValue(object Value) => To check the value present in bag or</p>

<p>not.</p>

<p>put(key,value) => it is used to add key and value in Bag</p>

<p>remove(key ,value) => It is used to remove key and value.</p>

<p>TreeList</p>

<p>========</p>

<p>TreeList simillar to Bucket but store items in tree format.</p>

<p>TreeList list = new TreeList (&quot;BUCKETS&quot;);</p>

<p>list.KeyAdd(KEY);</p>

<p>list.add(VALUE1);</p>

<p>list.RandomAdd(RANDOMNO);</p>

<p>list.DisplayO(list,0);</p>

<p>MASK</p>

<p>====</p>

<p>It is the extension of Tree Structure and it can store many values</p>

<p>using mask object and we can also retrieve the values stored in mask.</p>

<p>Mask m = new Mask(<DATATYPE>);</p>

<p>m.add(multiple values);</p>

<p>m.getR(Loc); => Get the values stored in right position</p>

<p>m.getL(LOC) => Get the values stored in left position</p>

<p>HEAP:</p>

<p>====</p>

<p>Creates a tree , puts the data into tree in a fairly balanced way and displays</p>

<p>the tree's size and data in a tree by performing an inorder traversal.</p>

<p>Heap hob = new Heap(<datatype>);</p>

<p>hob.add(datum);</p>

<p>hob = new Heap(key,value1,value2);</p>

<p>Bucktist</p>

<p>==========</p>

<p>Bucktist is simillar to Bucket but it is used to addd two values with one</p>

<p>key.</p>

<p>Bucktist l = null;</p>

<p>l= new Bucktist(key,value1,value2);</p>

<p>WICKET</p>

<p>=======</p>

<p>Wicket is used to store multiple values using same object with</p>

<p>4 values per key.</p>

<p>Syntax:</p>

<p>Wicket list12;</p>

<p>list12=new Wicket(key,v1,v2,v3,v4);</p>

<p>list12.Display();</p>

<p>list12.Display(list12,location);</p>

<p> EXAMPLE -1: BAG ===============</p>

<p><OJAVA7></p>

<p><PACK> MyP</p>

<p><%</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p> public void main()</p>

<p> {</p>

<p></p>

<p> Bag b <NEW> Bag();</p>

<p>b.PUT(1,34);</p>

<p>b.PUT(2,444);</p>

<p><PRINTLN>(&quot;&quot;+b);</p>

<p></p>

<p></p>

<p></p>

<p>%></p>

<p>?></p>

<p>EXAMPLE:2 : OAKJAVA7-CDOLLARARRAYS</p>

<p>==========</p>

<p><OAKJAVA7></p>

<p><USE> CUTIL;</p>

<p><PACK> MyP</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p></p>

<p> public void main()</p>

<p> {</p>

<p></p>

<p>ArrayList ar <NEW> ArrayList ();</p>

<p>for (int i=0;i<=100;i++)</p>

<p>ar.add(i,i);</p>

<p><CDOLLARARRAYS> list1 <NEW> <CDOLLARARRAYS>(&quot;ANIMALS &quot;);</p>

<p> list1.add(&quot;1 horse&quot;);</p>

<p>list1.add(&quot;2 pig&quot;);</p>

<p>list1.add(&quot;3 cow&quot;);</p>

<p>list1.add(&quot;4 goat&quot;);</p>

<p>list1.add(&quot;5 chicken&quot;);</p>

<p> list1.add(&quot;6 ostrich&quot;);</p>

<p>list1.add(ar.StringConvert());</p>

<p> for (int i=0;i<list1.size();i++)</p>

<p><PRINTLN>(&quot;&quot;+list1.get(i));</p>

<p> </p>

<p></p>

<p> %></p>

<p>?></p>

<p>EXAMPLE-3: CREATE AN BOOTLOADER Using OJAVA7</p>

<p> <OJAVA7> <USE> CUTIL;</p>

<p><PACK> MYOS</p>

<p>{</p>

<p> <CLASS> MYOs</p>

<p> {</p>

<p>public void main(){</p>

<p><PRINTLN>(&quot;HelloWorld for booting MYOS&quot;);</p>

<p></p>

<p></p>

<p> %></p>

<p>?></p>

<p>EXAMPE-4: POINTERS</p>

<p><OAKJAVA7> <USE> CUTIL;</p>

<p><PACK> MyP</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p> public void main()</p>

<p> {</p>

<p></p>

<p> <Str> s=&quot;dsdds&quot;;</p>

<p></p>

<p> {*} l Pointers (s);</p>

<p></p>

<p>l.add(s);</p>

<p></p>

<p> for (int i = 0; i NOT= l.size(); i = i + 1)</p>

<p> {</p>

<p></p>

<p> <OBJECT> obj=l.GETKEY(i);</p>

<p> <PRINTLN>(obj);</p>

<p></p>

<p></p>

<p></p>

<p> }</p>

<p>   %></p>

<p>?></p>

<p> EXAMPLE-5: DICTIONARY =====================</p>

<p><OJAVA7></p>

<p><USE> System.Collections.Generic;</p>

<p><PACK> MyP</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p></p>

<p> public void main()</p>

<p> {</p>

<p></p>

<p> Dictionary<string, string> openWith <NEW> Dictionary<string, string>();</p>

<p>openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);</p>

<p>openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);</p>

<p>openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);</p>

<p>openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);</p>

<p></p>

<p></p>

<p></p>

<p> %></p>

<p>?></p>

<p>Example-6: EXTEND =================</p>

<p><OAKJAVA7> <USE> CUTIL;</p>

<p><IMPORT></p>

<p><PACK> MyP</p>

<p><%</p>

<p> <CLASS> Programs</p>

<p> <%</p>

<p> public void main()</p>

<p> {</p>

<p></p>

<p></p>

<p> EXTEND list <NEW> EXTEND(&quot;BUCKETS&quot;);</p>

<p></p>

<p></p>

<p></p>

<p></p>

<p> list.KeyAdd(&quot;1101&quot;);</p>

<p></p>

<p> list.add(&quot;jemin&quot;);</p>

<p></p>

<p> list.RandomAdd();</p>

<p></p>

<p> list.Display(list);</p>

<p></p>

<p><PRINTLN>(&quot;&quot;+list.DisplayO(list,1));</p>

<p></p>

<p>%></p>

<p>?></p>

<p>EXAMPLE-7: HEAP</p>

<p><OAKJAVA7> <USE> CUTIL;</p>

<p><PACK> MyP</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p> public void main()</p>

<p> {</p>

<p></p>

<p> Heap root <NEW> Heap(&quot;wilmix&quot;);</p>

<p></p>

<p> for (int i = 0; i <= 10; i = i + 1)</p>

<p> {</p>

<p> root.add(&quot;item &quot; + i);</p>

<p> }</p>

<p></p>

<p> <PRINTLN>(root.size() );</p>

<p> root.printTree();</p>

<p></p>

<p></p>

<p> %></p>

<p>?></p>

<p>Example-8: LArray</p>

<p><OAKJAVA7></p>

<p><USE> CUTIL;</p>

<p><PACK> MyP</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p> public void main()</p>

<p> {</p>

<p> LArray root <NEW> LArray(&quot;root&quot;);</p>

<p> ArrayList ar <NEW> ArrayList();</p>

<p></p>

<p>for (int i=0;i<=1000;i++)</p>

<p> ar.add(i,i);</p>

<p> root.add(&quot;wilmix&quot;);</p>

<p>root.add(&quot;jemin&quot;);</p>

<p>root.add(&quot;shalom&quot;);</p>

<p>root.add(&quot;1010&quot;);</p>

<p>root.add(&quot;101&quot;);</p>

<p>root.add(&quot;201&quot;);</p>

<p>root.add(ar.StringConvert());</p>

<p>root.add(&quot;100000000&quot;);</p>

<p>//print the tree's size and contents</p>

<p> root.printTree();</p>

<p></p>

<p></p>

<p> %></p>

<p>?></p>

<p>Example-9 : PIPE</p>

<p><OAKJAVA7> <USE> CUTIL;</p>

<p><PACK> MyP</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p>public void main()</p>

<p> {</p>

<p></p>

<p>Pipe list <NEW> Pipe(&quot;BUCKETS&quot;);</p>

<p></p>

<p></p>

<p></p>

<p></p>

<p> list.KeyAdd(&quot;1101&quot;);</p>

<p></p>

<p> list.add(&quot;jemin&quot;);</p>

<p></p>

<p> list.RandomAdd();</p>

<p></p>

<p> list.Display(list);</p>

<p><PRINTLN>(&quot;&quot;+list.DisplayO(list,1));</p>

<p></p>

<p></p>

<p></p>

<p> %></p>

<p>?></p>

<p>EXAMPLE-10: TREELIST =====================</p>

<p><OAKJAVA7> <USE> CUTIL;</p>

<p><PACK> MyP</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p> public void main()</p>

<p> {</p>

<p></p>

<p>TreeList list <NEW> TreeList (&quot;BUCKETS&quot;);</p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p> list.KeyAdd(&quot;1101&quot;);</p>

<p></p>

<p> list.add(&quot;jemin&quot;);</p>

<p></p>

<p></p>

<p> list.RandomAdd(&quot;1111&quot;);</p>

<p>TreeList list2 <NEW> TreeList(&quot;BUCKETS&quot;);</p>

<p> list2.KeyAdd(&quot;1102&quot;);</p>

<p></p>

<p> list2.add(&quot;rahul&quot;);</p>

<p></p>

<p></p>

<p> list2.RandomAdd(&quot;1112&quot;);</p>

<p></p>

<p></p>

<p><PRINTLN>(&quot;DATA=&quot;+list.DisplayO(list,0));</p>

<p><PRINTLN>(&quot;DATA=&quot;+list2.DisplayO(list2,0));</p>

<p></p>

<p></p>

<p> %></p>

<p>?></p>

<p>Example-11 : MASK</p>

<p><OAKJAVA7></p>

<p><USE> CUTIL;</p>

<p><PACK> My</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p> public void main()</p>

<p> {</p>

<p> MASK root <NEW> MASK(&quot;wilmix&quot;);</p>

<p> for (int i = 0; i NOT= 10; i = i + 1)</p>

<p>{</p>

<p>root.add(&quot;item &quot; + i);</p>

<p>}</p>

<p></p>

<p></p>

<p></p>

<p>root <NEW> MASK(&quot;root1&quot;,1211211,54441);</p>

<p> root <NEW> MASK(&quot;root2&quot;,121121,5444);</p>

<p>root <NEW> MASK(&quot;root5&quot;,99121888,&quot;5&quot;);</p>

<p> root <NEW> MASK(&quot;root3&quot;,12112,544);</p>

<p> root <NEW> MASK(&quot;root4&quot;,1211,54);</p>

<p> root <NEW> MASK(&quot;root51&quot;,121,5);</p>

<p></p>

<p>root.printTree();</p>

<p> </p>

<p></p>

<p> %></p>

<p>?></p>

<p>Example-12 : WICKET ====================</p>

<p><OAKJAVA7> <USE> CUTIL;</p>

<p><PACK> MyPo</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p> public void main()</p>

<p> {</p>

<p> Wicket list12;</p>

<p> list12 <NEW> Wicket(1000,10002,43433,4343,5555451);</p>

<p> list12 <NEW> Wicket(10001,100021,434331,4343,5555452);</p>

<p> list12 <NEW> Wicket(10002,100022,434332,4343,5555453);</p>

<p> list12 <NEW> Wicket(10003,100023,434333,4343,5555454);</p>

<p> list12 <NEW> Wicket(10004,100024,434334,4343,5555455);</p>

<p> list12 <NEW> Wicket(10005,100025,434335,4343,5555456);</p>

<p></p>

<p></p>

<p> list12.Display(list12);</p>

<p></p>

<p> <PRINTLN>(&quot;DATA=&quot;+list12.DisplayO(list12,0));</p>

<p></p>

<p></p>

<p></p>

<p> %></p>

<p>?></p>

<p>Example-13 : STRUCTURE</p>

<p><OAKJAVA7> <USE> CUTIL;</p>

<p><PACK> MyPoi</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p> public void main()</p>

<p> {</p>

<p></p>

<p> <Str> s=&quot;dsdds&quot;;</p>

<p></p>

<p> {*} l Pointers(s);</p>

<p></p>

<p>l.add(s);</p>

<p></p>

<p> for (int i = 0; i NOT= l.size(); i = i + 1)</p>

<p> {</p>

<p></p>

<p> <OBJECT> obj=l.GETKEY(i);</p>

<p> <PRINTLN>(obj);</p>

<p></p>

<p></p>

<p></p>

<p> }</p>

<p></p>

<p></p>

<p></p>

<p></p>

<p> <STRUCTURE> list <NEW> <STRUCTURE> (l.GETKEY(0));</p>

<p></p>

<p> for (int i11 = 0; i11 NOT= list.size(); i11 = i11 + 1)</p>

<p> {</p>

<p></p>

<p></p>

<p></p>

<p> <OBJECT> el=list.ret(i11);</p>

<p></p>

<p></p>

<p> <PRINTLN>(&quot;SNO= &quot;+el);</p>

<p> }</p>

<p></p>

<p></p>

<p></p>

<p> %></p>

<p>?></p>

<p>Example-14 : BUCKETIST ======================</p>

<p><OAKJAVA7> <USE> CUTIL; <PACK> MyP</p>

<p>{</p>

<p> <CLASS> Programs</p>

<p> {</p>

<p> public void main()</p>

<p> {</p>

<p></p>

<p>Bucketist bp <NEW> Bucketist(&quot;wilmix&quot;);</p>

<p>bp <NEW> Bucketist(1,222,434);</p>

<p>bp <NEW> Bucketist(1,222,434);</p>

<p>bp.Display(bp);</p>

<p><PRINTLN>(&quot;DATA=&quot;+bp.DisplayO(bp,1));</p>

<p></p>

<p></p>

<p> %></p>

<p>?></p>

<p>=====================================================</p>
